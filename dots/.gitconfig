[user]
  editor = vi
[alias]
  c = commit
  ; checkout the given branch, using fuzzy finding if a branch is not given.
  co = "!f() { \
    declare branch=\"$1\"; \
    if [ \"$branch\" == \"\" ]; then \
      branch=$(git branch -a | sed 's|remotes/origin/||' | grep -v 'HEAD ->' | fzf | tr -d '^* '); \
    fi; \
    git checkout \"$branch\"; \
  }; f"
  m = "!f() { \
    declare branch=\"$1\"; \
    if [ \"$branch\" == \"\" ]; then \
      branch=$(git branch | grep -vE '(\\* )?(main|master|develop|dev|sandbox|staging)$' | fzf | tr -d '^* '); \
    fi; \
    if [ ! \"$branch\" == \"\" ]; then \
      git merge \"$branch\"; \
    fi; \
  }; f"
  b = branch
  ba = branch -a
  d = difftool
  rv = checkout --
  s = stash
  sl = stash list
  sa = stash apply
  sc = stash clear
  st = status
  bname = rev-parse --abbrev-ref HEAD
  protected = "!f() { \
    declare branch=\"$(git bname)\"; \
    if [[ \"$branch\" == \"develop\" || \"$branch\" == \"master\" ]]; then \
      echo \"no. branch '$branch' is protected.\"; \
    fi \
  }; f"
  bpush = "!f() { \
    declare protected=$(git protected); \
    if [ \"$protected\" == \"\" ]; then \
      declare branch=$(git bname); \
      git push -u origin $branch; \
    else \
      echo \"$protected\"; \
    fi \
  }; f"
  bpull = !sh -c '_branch_name=`git bname` && git pull origin $_branch_name'
  ; bpullr = !sh -c '_branch_name=`git bname` && git pull --rebase origin $_branch_name'
  revision = !git show|head -1|cut -c8-
  rev = revision
  ; delete a local branch that has been merged to master and not pushed to remote
  bdel = branch -d
  ; delete a local branch that has not been merged and not pushed to remote
  bdelf = branch -D
  ; delete a remote branch that has been merged
  bdelr = !sh -c 'git branch -d -r origin/$0'
  ; delete a remote branch that has not been merged
  bdelrf = !sh -c 'git branch -D -r origin/$0'
  ; wipe (remove) a remote branch from origin (remove the branch from GitHub)
  bwipe = !sh -c 'git push origin --delete $0'
  ; cleanup local copies of branches that have already been merged
  bclean = !git branch --merged | grep -vE '\\*|main|master|develop|dev' | xargs -n1 git branch -d
  bD = "!f() { \
    declare branch=\"$1\"; \
    if [ \"$branch\" == \"\" ]; then \
      branch=$(git branch | grep -vE '(\\* )?(main|master|develop|dev|sandbox|staging)$' | fzf | tr -d '^* '); \
    fi; \
    if [ ! \"$branch\" == \"\" ]; then \
      git branch -D \"$branch\"; \
    fi; \
  }; f"
  dirty = clean -dxn
  klean = clean -dxi
  mainclean = !git co main && git bpull && git bclean
  names = "!f() { \
    if [ -z "$1" ]; then \
      git diff --name-only; \
    else \
      git diff --name-only \"$1\"; \
    fi; \
  }; f"
[commit]
  template = ~/.gitmessage
	gpgsign = true
[diff]
    tool = nvimdiff
[difftool "nvimdiff"]
    cmd = "nvim -d \"$LOCAL\" \"$REMOTE\""
[merge]
  tool = vimdiff
[mergetool]
  prompt = true
[mergetool "vimdiff"]
  cmd = nvim -d $BASE $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'
[pull]
	ff = only
[init]
	defaultBranch = main
[core]
	attributesfile = ~/.gitattributes
  editor = "nvr -cc split --remote-wait-silent +'set bufhidden=wipe'"
[difftool]
	prompt = false
[tag]
	gpgSign = true

; Use GPG to sign commits and tags:
;
; 1. brew install gpg
; 2. Make sure ~/.gnupg/gpg-agent.conf exists and looks similar to this:
;     default-cache-ttl 157680000
;     max-cache-ttl 157680000
;     pinentry-program /opt/homebrew/bin/pinentry
; 3. gpgconf --kill gpg-agent
;     Only if gpg-agent.conf has changed
; 4. gpg --full-generate-key
;     Choose '10' for 'sign only' w/out encryption, defaults for everything else
; 5. echo "test" | gpg --clearsign
;     To test signing
; 6. gpg --list-secret-keys --keyid-format=long
;     - Grab the part after 'ed25519/' for the correct secret key
;     - Also grab the fingerprint, the entire string below the previous part
; 7. git config --global user.signingkey <key saved from previous step>
; 8. git config --global commit.gpgsign true
; 9. git config --global tag.gpgSign true
; 10. gpg --armor --export <key fingerprint from step 6>
;      Add this GPG public key to your source control system (i.e. GitHub)
