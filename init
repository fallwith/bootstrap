#!/bin/bash
set -euo pipefail

#
# bootstrap init script
#
# Usage:
#   * For a brand new machine, clone the bootstrap repo and launch this script
#   * Any time the clone is updated, re-run this script
#
# If you'd like to symlink the dot files to a location other than $HOME,
# export the variable BOOTSTRAP_TARGET_DIR before calling this script.
#
# If you'd like to use a shell other than the /usr/local/bin/mksh,
# export the variable DESIRED_SHELL before calling this script.
#

bootstrap_dir=$(dirname "${BASH_SOURCE}")
cd $bootstrap_dir
bootstrap_dir=$(pwd)
target_dir=${BOOTSTRAP_TARGET_DIR:-$HOME}
DESIRED_SHELL=${DESIRED_SHELL:-}


# --- --- --- --- --- --- ---
# helper functions
# --- --- --- --- --- --- ---

function running_mac_os() {
  [[ "$OSTYPE" == "darwin"* ]] && return
  false
}

function running_debian() {
  (command -v apt-get >/dev/null) && return
  false
}


# --- --- --- --- --- --- ---
# create dot file symlinks
# --- --- --- --- --- --- ---

echo "Symlinking dot files..."
function process_dot_dir() {
  dir=$1
  shopt -s dotglob
  for f in "$dir"/*; do
    # for dirs beneath ~/.config, symlink the entire dir
    if [[ -d "$f" ]] && [[ $dir != */.config ]]; then
      process_dot_dir "$f"
      continue
    fi
    target="$target_dir/${f//$bootstrap_dir\/dots\//}"
    if [[ -e "$target" ]]; then
      echo "$target already exists - skipping"
      continue
    else
      if [[ "${target%/*}" != "$target_dir" ]]; then
        cmd="mkdir -p ${target%/*}"
        echo "$cmd"
        eval "$cmd"
      fi
      cmd="ln -s \"$f\" \"$target\""
      echo "$cmd"
      eval "$cmd"
    fi
  done
  shopt -u dotglob
}
process_dot_dir "$bootstrap_dir/dots"


# --- --- --- --- --- --- ---
# fonts
# --- --- --- --- --- --- ---

if running_mac_os; then
  echo "Installing fonts..."
  for f in "$bootstrap_dir/fonts"/*; do
    target="$target_dir/Library/Fonts/${f//$bootstrap_dir\/fonts\//}"
    if [[ -e "$target" ]]; then
      echo "$target already exists - skipping"
      continue
    else
      echo "Installing font $f..."
      cmd="cp \"$f\" \"$target\""
      echo "$cmd"
      eval "$cmd"
    fi
  done
elif running_debian; then
  fonts_link="$target_dir/.fonts"
  if [[ -e "$fonts_link" ]]; then
    echo "Fonts already linked to at $fonts_link - skipping"
  else
    ln -s "$bootstrap_dir/fonts" "$fonts_link"
    echo "Fonts linked to at $fonts_link"
    fc-cache
    echo "Font cache cleared"
  fi
fi

# --- --- --- --- --- --- ---
# set desired os x behavior
# --- --- --- --- --- --- ---

if running_mac_os; then
  echo "Setting up macOS behavior preferences..."
  $target_dir/bin/macos_settings
fi


# --- --- --- --- --- --- ---
# install and run Homebrew
# --- --- --- --- --- --- ---

if running_mac_os; then
  echo "Installing and running Homebrew..."
  $target_dir/bin/brewupdate
fi


# --- --- --- --- --- --- --- ---
# install desired Linux packages
# --- --- --- --- --- --- --- ---

if running_debian; then
  sudo apt-get install ninja-build gettext libtool libtool-bin autoconf automake cmake g++ pkg-config unzip xclip mksh rclone kitty cros-guest-tools x11-apps libglfw3 libglfw3-dev alacritty
fi


# --- --- --- --- --- --- ---
# set the desired shell
# --- --- --- --- --- --- ---

function existing_shell() {
  if running_mac_os; then
    finger $USER|grep -o 'Shell: .*'|cut -c 8-
  elif running_debian; then
    cat /etc/passwd|grep "^$USER:"|sed 's/^.*:\(.*\)/\1/'
  fi
}

if [[ ! -z "$DESIRED_SHELL" ]]; then
  if [[ ! -f "$DESIRED_SHELL" ]]; then
    echo "Error: desired shell $DESIRED_SHELL does not exist!"
    exit -1
  fi
  if $(grep -q $DESIRED_SHELL /etc/shells); then
    echo "Desired shell $DESIRED_SHELL already exists in /etc/shells"
  else
    echo "Appending $DESIRED_SHELL to /etc/shells..."
    echo $DESIRED_SHELL|sudo tee -a /etc/shells>/dev/null;
  fi

  if [[ "$(existing_shell)" == "$DESIRED_SHELL" ]]; then
    echo "User $USER is already set to use desired shell $DESIRED_SHELL"
  else
    echo "Changing shell for user $USER to $DESIRED_SHELL..."
    if running_debian; then
      sudo chsh -s $DESIRED_SHELL $USER
    else
      chsh -s $DESIRED_SHELL
    fi
  fi
fi


# --- --- --- --- --- --- ---
# python enhancements
# --- --- --- --- --- --- ---

# install pip3
if (command -v pip3 >/dev/null); then
  echo "Python pip3 already exists"
else
  echo "installing Python pip..."
  if running_debian; then
    sudo apt-get install python3-pip
  else
    echo "Error: don't know how to install pip3 on this OS!"
    exit -1
  fi
fi

# install neovim-remote
if (command -v nvr >/dev/null); then
  echo "neovim-remote already installed"
else
  echo "Installing neovim-remote..."
  if running_mac_os; then
    # pip3 install --user --upgrade neovim-remote
    echo "Skipping neovim-remote installation on macos, use 'brew install neovim-remote' instead"
  else
    sudo pip3 install --upgrade --break-system-packages neovim-remote
  fi
fi

# broken. should be vim-vint?
# if (command -v vint >/dev/null); then
#   echo "vint already installed"
# else
#   echo "Installing vint..."
#   /usr/local/bin/pip3 install --user --upgrade vint
# fi


# --- --- --- --- --- --- ---
# Neovim
# --- --- --- --- --- --- ---

if running_debian; then
  if (command -v nvim >/dev/null); then
    echo "Neovim is already installed"
  else
    echo 'Building and installing Neovim...'
    rm -rf neovim
    git clone https://github.com/neovim/neovim
    cd neovim
    make CMAKE_BUILD_TYPE=Release
    sudo make install
    cd "$bootstrap_dir"
  fi
fi

# Packer content commented out in favor of lazy.nvim...
# install or update Neovim plugins
# echo "Installing / updating Neovim plugins..."
# \nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'


# --- --- --- --- --- --- ---
# Rust
# --- --- --- --- --- --- ---

if (command -v cargo >/dev/null); then
  echo "rust is already installed - running rustup"
  rustup update stable
else
  echo "Installing rust..."
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs |sh
  wget https://sh.rustup.rs -O rustup-init.sh
  sh rustup-init.sh --no-modify-path -y
fi
[[ -e "$HOME/.cargo/env" ]] && source "$HOME/.cargo/env"
rustfmt --version 2>/dev/null
if [[ $? -ne 0 ]]; then
  rustup component add rustfmt
else
  echo 'rustfmt is already installed'
fi
cargo clippy --version 2>/dev/null
if [[ $? -ne 0 ]]; then
  rustup component add clippy
else
  echo 'clippy is already installed'
fi

# racer
# rustup install nightly
# git clone https://github.com/racer-rust/racer.git
# cd racer
# cargo +nightly build --release
# cp target/release/racer ~/bin/
# rustup component add rust-src


# # --- --- --- --- --- --- ---
# # Kitty
# # --- --- --- --- --- --- ---
# if [[ ! -e "${target_dir}/.config/kitty/kitty.conf" ]]; then
#   if running_debian; then
#     ln -s "${target_dir}/.config/kitty/kitty_debian.conf" "${target_dir}/.config/kitty/kitty.conf"
#   elif running_mac_os; then
#     ln -s "${target_dir}/.config/kitty/kitty_macos.conf" "${target_dir}/.config/kitty/kitty.conf"
#   else
#     echo "Error: unable to prep Kitty for this operating system!"
#     exit -1
#   fi
# fi


# --- --- --- --- --- --- ---
# C++ Matrix
# --- --- --- --- --- --- ---

cxxmatrix_location="${target_dir}/bin/cxxmatrix"
if [[ -e "$cxxmatrix_location" ]]; then
  echo "C++ Matrix already installed"
else
  git clone https://github.com/akinomyoga/cxxmatrix.git
  cd cxxmatrix
  make
  mv cxxmatrix "$cxxmatrix_location"
fi


# --- --- --- --- --- --- ---
# Postgres.app
# --- --- --- --- --- --- ---

# commented out - use the Homebrew formula instead
# if [[ -e "/Applications/Postgres.app" ]]; then
#   echo "Postgres.app already installed"
# else
#   rm -f Postgres.dmg
#   wget --no-check-certificate https://github.com/PostgresApp/PostgresApp/releases/download/v2.4.2/Postgres-2.4.2-13.dmg -O Postgres.dmg
#   open Postgres.dmg
#   echo 'Hit a key after install Postgres.app to /Applications'
#   read -n 1 any_key
#   echo -e "export PATH=/Applications/Postgres.app/Contents/Versions/latest/bin:\$PATH\n" >> ~/.mkshrc_private
# fi

# --- --- --- --- --- --- ---
# Debian only from here on out
# --- --- --- --- --- --- ---
! running_debian && exit


# --- --- --- --- --- --- ---
# FZF
# --- --- --- --- --- --- ---

if (command -v fzf >/dev/null); then
  echo "fzf is already installed"
else
  echo 'Installing fzf...'
  rm -rf fzf
  git clone --depth 1 https://github.com/junegunn/fzf.git
  cd fzf
  ./install --bin
  sudo cp bin/fzf /usr/local/bin/fzf
  cd "$bootstrap_dir"
fi


# --- --- --- --- --- --- ---
# Ripgrep
# --- --- --- --- --- --- ---

if (command -v rg >/dev/null); then
  echo "Ripgrep is already installed"
else
  echo 'Installing ripgrep...'
  rm -rf ripgrep
  git clone https://github.com/BurntSushi/ripgrep
  cd ripgrep
  cargo build --release
  sudo cp target/release/rg /usr/local/bin/rg
  cd "$bootstrap_dir"
fi


# --- --- --- --- --- --- ---
# fd
# --- --- --- --- --- --- ---

if (command -v fd >/dev/null); then
  echo "fd is already installed"
else
  echo 'Installing fd...'
  rm -rf fd
  git clone https://github.com/sharkdp/fd
  cd fd
  cargo build --release
  sudo cp target/release/fd /usr/local/bin/fd
  cd "$bootstrap_dir"
fi


# --- --- --- --- --- --- ---
# Google Drive
# --- --- --- --- --- --- ---

gdrive='/mnt/chromeos/GoogleDrive/MyDrive/private'
gdrive_link="$target_dir/.gdrive"
if [[ -e "$gdrive_link" ]]; then
  echo "$gdrive_link already exists - skipping"
elif [[ -e "$gdrive" ]]; then
  ln -s "$gdrive" "$gdrive_link"
  ln -s "${gdrive_link}/.netrc" ~/.netrc
  ln -s "${gdrive_link}/.mkshrc_private" ~/.mkshrc_private
else
  echo "WARNING: Google Drive private share not found at ${gdrive}!"
fi
