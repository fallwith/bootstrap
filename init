#!/bin/bash
set -euo pipefail

#
# bootstrap init script
#
# Usage:
#   * For a brand new machine, clone the bootstrap repo and launch this script
#   * Any time the clone is updated, re-run this script
#
# If you'd like to symlink the dot files to a location other than $HOME,
# export the variable BOOTSTRAP_TARGET_DIR before calling this script.
#
# If you'd like to use a shell other than the /usr/local/bin/mksh,
# export the variable DESIRED_SHELL before calling this script.
#

bootstrap_dir=$(dirname "${BASH_SOURCE}")
cd $bootstrap_dir
bootstrap_dir=$(pwd)
target_dir=${BOOTSTRAP_TARGET_DIR:-$HOME}

# this shell will be added to /etc/shells and set as the default
DESIRED_SHELL=${DESIRED_SHELL:-/usr/local/bin/mksh}


# --- --- --- --- --- --- ---
# create dot file symlinks
# --- --- --- --- --- --- ---

echo "Symlinking dot files..."
function process_dot_dir() {
  dir=$1
  shopt -s dotglob
  for f in "$dir"/*; do
    if [[ -d "$f" ]]; then
      process_dot_dir "$f"
      continue
    fi
    target="$target_dir/${f//$bootstrap_dir\/dots\//}"
    if [[ -e "$target" ]]; then
      echo "$target already exists - skipping"
      continue
    else
      if [[ "${target%/*}" != "$target_dir" ]]; then
        cmd="mkdir -p ${target%/*}"
        echo "$cmd"
        eval "$cmd"
      fi
      cmd="ln -s \"$f\" \"$target\""
      echo "$cmd"
      eval "$cmd"
    fi
  done
  shopt -u dotglob
}
process_dot_dir "$bootstrap_dir/dots"


# --- --- --- --- --- --- ---
# set desired os x behavior
# --- --- --- --- --- --- ---

echo "Setting up macOS behavior preferences..."
$target_dir/bin/macos_settings


# --- --- --- --- --- --- ---
# install and run Homebrew
# --- --- --- --- --- --- ---

echo "Installing and running Homebrew..."
$target_dir/bin/brewupdate


# --- --- --- --- --- --- ---
# set the desired shell
# --- --- --- --- --- --- ---

if [[ ! -f "$DESIRED_SHELL" ]]; then
  echo "Error: desired shell $DESIRED_SHELL does not exist!"
  exit -1
fi
if $(grep -q $DESIRED_SHELL /etc/shells); then
  echo "Desired shell $DESIRED_SHELL already exists in /etc/shells"
else
  echo "Appending $DESIRED_SHELL to /etc/shells..."
  echo $DESIRED_SHELL|sudo tee -a /etc/shells>/dev/null;
fi
if [[ "$(finger $USER|grep -o 'Shell: .*')" = "Shell: $DESIRED_SHELL" ]]; then
  echo "User $USER is already set to use desired shell $DESIRED_SHELL"
else
  echo "Changing shell for user $USER to $DESIRED_SHELL..."
  chsh -s $DESIRED_SHELL;
fi
